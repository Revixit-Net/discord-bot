import discord
import mariadb
import logging
import uuid
import bcrypt
from discord.ext import commands
from utils.database import DatabaseManager
from utils.helpers import generate_uuid
from utils.helpers import generate_error_code

logger = logging.getLogger("discord_bot")

class Registration(commands.Cog):
    async def send_error_response(self, ctx, error_message, exception=None):
        error_code = generate_error_code()
        error_msg = f"üö® **–û—à–∏–±–∫–∞ {error_code}**: {error_message}"
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–¥–æ–º
        logger.error(
            f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code} | "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ctx.author.id} | "
            f"–û—à–∏–±–∫–∞: {str(exception)}",
            exc_info=bool(exception)
        )

        await ctx.send(error_msg)
    def __init__(self, bot):
        self.bot = bot
        self.db = DatabaseManager()
        self.cooldown = commands.CooldownMapping.from_cooldown(1, 30, commands.BucketType.user)

    def hash_password(self, password: str) -> str:
        return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

    @commands.command(name="register")
    async def start_registration(self, ctx):
        try:
            await ctx.author.send(
                "üéÆ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞**\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ –õ–° –∫–æ–º–∞–Ω–¥—É:\n"
                "`!reg <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`\n\n"
                "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
                "‚Ä¢ –õ–æ–≥–∏–Ω: 3-16 —Å–∏–º–≤–æ–ª–æ–≤ (a-z, 0-9, _)\n"
                "‚Ä¢ –ü–∞—Ä–æ–ª—å: –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤\n"
                "–ü—Ä–∏–º–µ—Ä: `!reg Alexei_123 sTr0ngP@ss`"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è {ctx.author.id}")

        except discord.Forbidden:
            await ctx.send("üîî –í–∫–ª—é—á–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ctx.author.id}")

    @commands.command(name="reg")
    @commands.dm_only()
    async def process_registration(self, ctx, login: str, password: str):
        logger.info(f"–ù–∞—á–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {ctx.author.id} | –õ–æ–≥–∏–Ω: {login}")

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
            if not 3 <= len(login) <= 16:
                raise commands.BadArgument("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤")

            if not login.isalnum() and '_' not in login:
                raise commands.BadArgument("–õ–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
            if len(password) < 8:
                raise commands.BadArgument("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            existing = self.db.check_existing_user(ctx.author.id, login)
            if existing:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {ctx.author.id}")
                return await ctx.send("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç!")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            user_data = (
                login,
                self.hash_password(password),
                str(uuid.uuid4()),  # accessToken
                generate_uuid(login),  # UUID
                ctx.author.id,
                "default"  # serverID
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.db.add_user(user_data)
            
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {login} ({ctx.author.id})")
            await ctx.send(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç **{login}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                          f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –ª–∞—É–Ω—á–µ—Ä–µ.")

        except mariadb.IntegrityError as e:
            await self.send_error_response(
                ctx, 
                "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö. –õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç.",
                e
            )
        
        except commands.BadArgument as e:
            await self.send_error_response(
                ctx,
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}",
                e
            )
        
        except Exception as e:
            await self.send_error_response(
                ctx,
                "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ—Å—å–±–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª https://ptb.discord.com/channels/1224402434160595027/1230213959525601420 .",
                e
            )

    @process_registration.error
    async def reg_error(self, ctx, error):
        if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã! –ü—Ä–∏–º–µ—Ä: `!reg Alexei password`")
        elif isinstance(error, commands.PrivateMessageOnly):
            await ctx.send("üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞!")

async def setup(bot):
    await bot.add_cog(Registration(bot))
    logger.info("–ö–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")