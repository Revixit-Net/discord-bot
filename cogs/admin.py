import discord
from discord.ext import commands
from discord import app_commands
import logging
from utils.database import DatabaseManager
from utils.helpers import validate_password, hash_password, generate_error_code
from config import Config

logger = logging.getLogger("discord_bot")

class AdminTools(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = DatabaseManager()
        self.admin_role_id = Config.ADMIN_ROLE_ID

    async def login_autocomplete(
        self, 
        interaction: discord.Interaction,
        current: str
    ) -> list[app_commands.Choice[str]]:
        """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        if not self.db.is_connected():
            return [app_commands.Choice(name="üö® –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", value="error")]
        
        logins = self.db.search_logins(current)
        return [app_commands.Choice(name=login, value=login) for login in logins[:25]]

    @app_commands.command(
        name="delete",
        description="[ADMIN] –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    @app_commands.describe(username="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.autocomplete(username=login_autocomplete)
    @app_commands.checks.has_permissions(administrator=True)
    async def delete_user(
        self,
        interaction: discord.Interaction,
        username: str
    ):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        await interaction.response.defer(ephemeral=True)
        try:
            deleted = self.db.delete_user(username)
            if deleted:
                msg = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç **{username}** —É–¥–∞–ª—ë–Ω!"
                logger.warning(f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            else:
                msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            await interaction.followup.send(msg, ephemeral=True)
        except Exception as e:
            error_code = generate_error_code()
            logger.error(f"{error_code} | {str(e)}", exc_info=True)
            await interaction.followup.send(f"üö® –û—à–∏–±–∫–∞ {error_code}", ephemeral=True)

    @app_commands.command(
        name="userinfo",
        description="[ADMIN] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
    )
    @app_commands.describe(username="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.autocomplete(username=login_autocomplete)
    @app_commands.checks.has_permissions(administrator=True)
    async def user_info(
        self,
        interaction: discord.Interaction,
        username: str
    ):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        await interaction.response.defer(ephemeral=True)
        try:
            with self.db.get_cursor() as cursor:
                cursor.execute(
                    """SELECT uuid, discord_id, serverID 
                    FROM users 
                    WHERE username = ?""",
                    (username,)
                )
                result = cursor.fetchone()
                if result:
                    uuid, discord_id, server_id = result
                    embed = discord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {username}", color=0x00ff00)
                    embed.add_field(name="UUID", value=f"`{uuid}`", inline=False)
                    embed.add_field(name="Discord ID", value=f"`{discord_id}`", inline=False)
                    embed.add_field(name="–°–µ—Ä–≤–µ—Ä", value=server_id, inline=False)
                    await interaction.followup.send(embed=embed, ephemeral=True)
                else:
                    await interaction.followup.send("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
        except Exception as e:
            error_code = generate_error_code()
            logger.error(f"{error_code} | {str(e)}", exc_info=True)
            await interaction.followup.send(f"üö® –û—à–∏–±–∫–∞ {error_code}", ephemeral=True)

    @app_commands.command(
        name="setpassword",
        description="[ADMIN] –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
    )
    @app_commands.describe(
        username="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        new_password="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω. 8 —Å–∏–º–≤–æ–ª–æ–≤)"
    )
    @app_commands.autocomplete(username=login_autocomplete)
    @app_commands.checks.has_permissions(administrator=True)
    async def admin_set_password(
        self,
        interaction: discord.Interaction,
        username: str,
        new_password: str
    ):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        await interaction.response.defer(ephemeral=True)
        try:
            if error := validate_password(new_password):
                return await interaction.followup.send(f"‚ùå {error}", ephemeral=True)
            
            new_hash = hash_password(new_password)
            success = self.db.update_password(username, new_hash)
            if success:
                msg = f"‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è **{username}** –∏–∑–º–µ–Ω—ë–Ω!"
                logger.warning(f"–ê–¥–º–∏–Ω —Å–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å: {username}")
            else:
                msg = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            await interaction.followup.send(msg, ephemeral=True)
        except Exception as e:
            error_code = generate_error_code()
            logger.error(f"{error_code} | {str(e)}", exc_info=True)
            await interaction.followup.send(f"üö® –û—à–∏–±–∫–∞ {error_code}", ephemeral=True)

async def setup(bot):
    await bot.add_cog(AdminTools(bot))
    logger.info("–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")